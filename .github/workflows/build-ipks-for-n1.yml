#
# Copyright (c) 2019 P3TERX
#
# Description: Build OpenWrt using GitHub Actions
#

name: Build ipks For N1

on:
  repository_dispatch:
  push:
    branches:
      - master
#    paths:
#      - '.config'
  schedule:
    - cron: 0 * * * *
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: .config
  SSH_ACTIONS: false
  TZ: Asia/Shanghai
  # 登录蓝奏云后查看cookie
  # LANZOU_ID ： woozooo.com -> Cookie -> ylogin
  # LANZOU_PSD ： pc.woozooo.com -> Cookie -> phpdisk_info
  ylogin: ${{ secrets.LANZOU_ID }}
  phpdisk_info: ${{ secrets.LANZOU_PSD }}
  # 蓝奏云里的文件夹名（需手动在蓝奏云创建）
  #LANZOU_FOLDER: 'ipksforN1'
  # 蓝奏云里的文件夹ID（ipksforN1:2785444）
  LANZOU_FOLDER_ID: '2785444'

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Check Actions Status
      id: actions
      run: |
        actions_num=$(curl -sL https://github.com/o0HalfLife0o/actions-ipk-for-n1/actions |grep 'In progress' |wc -l)
        if [ "$actions_num" -le "2" ]; then
          echo "::set-output name=status::success"
        fi

    - name: Checkout
      uses: actions/checkout@v2
      if: steps.actions.outputs.status == 'success'

    - name: Checkout the "release" branch
      uses: actions/checkout@v2
      if: steps.actions.outputs.status == 'success'
      with:
        ref: release
        path: old

    - name: Check Smartdns
      id: smartdns
      if: steps.actions.outputs.status == 'success'
      run: |
        latest=$(curl -sL https://github.com/pymumu/smartdns/releases )
        #ver=$(echo "$latest"|grep -o 'smartdns.[0-9_\.-]\+.x86_64-linux-all.tar.gz' |head -1 |sed -e 's#smartdns.##' -e 's#.x86_64.*##')
        #commit=$(echo "$latest"|grep -o '/pymumu/smartdns/commit/[a-z0-9]\+'|head -1 | cut -d\/ -f5)
        ver="1.$(date -d "8 hour" -u +%Y.%m.%d-%H%M)"
        commit=$(curl -sL https://github.com/pymumu/smartdns/commits/master |grep -o '/pymumu/smartdns/commit/[a-z0-9]\+' |head -1 | cut -d\/ -f5)
        shortCommit=$(echo $commit |cut -c 1-20)
        if curl -sL https://github.com/o0HalfLife0o/actions-ipk-for-n1/commits/release |grep -q "$shortCommit"; then
        #if ls ./old/* |grep -q "smartdns_$ver"; then
          sed -i '/^CONFIG_PACKAGE_smartdns/s/^/#/' ./.config
        else
          echo "::set-output name=status::success"
          echo "SMARTDNS_VER=$ver" >> $GITHUB_ENV
          echo "SMARTDNS_COMMIT=$commit" >> $GITHUB_ENV
        fi

    - name: Check V2ray
      id: v2ray
      if: steps.actions.outputs.status == 'success'
      run: |
        latest=$(curl -sL https://github.com/v2fly/v2ray-core/releases )
        ver=$(echo "$latest"|grep -o 'tree/v[0-9]\+\.[0-9]\+\.[0-9]\+' |head -1 |cut -d v -f2)
        if ls ./old/* |grep -q "v2ray_$ver"; then
          sed -i '/^CONFIG_PACKAGE_v2ray/s/^/#/' ./.config 
        else
          #echo "::set-output name=status::success"
          echo "V2RAY_VER=$ver" >> $GITHUB_ENV
        fi

    - name: Check Xray
      id: xray
      if: steps.actions.outputs.status == 'success'
      run: |
        latest=$(curl -sL https://github.com/XTLS/Xray-core/releases )
        ver=$(echo "$latest"|grep -o 'tree/v[0-9]\+\.[0-9]\+\.[0-9]\+' |head -1 |cut -d v -f2)
        if ls ./old/* |grep -q "xray_$ver"; then
          sed -i '/CONFIG_PACKAGE_xray/c CONFIG_PACKAGE_xray=y' ./.config
        else
          echo "::set-output name=status::success"
          echo "XRAY_VER=$ver" >> $GITHUB_ENV
        fi

    - name: Check Golang
      id: golang
      if: steps.v2ray.outputs.status == 'success' || steps.xray.outputs.status == 'success'
      run: |
        get_Go_ver=$(curl -sL https://raw.githubusercontent.com/XTLS/Xray-core/main/.github/workflows/release.yml |grep -o 'go-version:[A-Za-z0-9^\.\t ]\+' |cut -d \^ -f2 )
        get_Go_ver_major=$(echo $get_Go_ver |awk -F '.' '{print $1"."$2}')
        get_Go_ver_patch=$(echo $get_Go_ver |cut -d \. -f3)
        lean_golang=$(curl -sL https://raw.githubusercontent.com/coolsnowwolf/packages/master/lang/golang/golang/Makefile)
        if ! echo "$lean_golang" |grep -q "GO_VERSION_MAJOR_MINOR:=$get_Go_ver_major" || ! echo "$lean_golang" |grep -q "GO_VERSION_PATCH:=$get_Go_ver_patch" ; then
          echo "GO_VERSION_MAJOR_MINOR_PATCH=$get_Go_ver" >> $GITHUB_ENV
          echo "GO_VERSION_MAJOR_MINOR=$get_Go_ver_major" >> $GITHUB_ENV
          echo "GO_VERSION_PATCH=$get_Go_ver_patch" >> $GITHUB_ENV
          echo "::set-output name=status::success"
        fi

    - name: Initialization environment
      id: initial
      if: steps.smartdns.outputs.status == 'success' || steps.v2ray.outputs.status == 'success' || steps.xray.outputs.status == 'success'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "::set-output name=status::success"

    - name: Set $GOPATH and more variables
      if: steps.initial.outputs.status == 'success'
      run: |
        echo "RELEASE_NAME=Released on $(date -d "8 hour" -u +%Y%m%d%H%M)" >> $GITHUB_ENV
        echo "TAG_NAME=$(date -d "8 hour" -u +%Y%m%d%H%M)" >> $GITHUB_ENV
        echo "GOPATH=$(dirname $GITHUB_WORKSPACE)" >> $GITHUB_ENV
        echo "$(dirname $GITHUB_WORKSPACE)/bin" >> $GITHUB_PATH
      shell: bash

    - name: Setup Go 1.x
      uses: actions/setup-go@v2
      if: steps.initial.outputs.status == 'success'
      with:
        go-version: "^${{ env.GO_VERSION_MAJOR_MINOR }}"

    - name: Clone source code
      working-directory: /workdir
      if: steps.initial.outputs.status == 'success'
      run: |
        df -hT $PWD
        #clone latest
        #git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        #back to e04fd21629fead0cae623df65a6a58466dfe1d51
        mkdir -p openwrt
        cd openwrt/
        git init
        git remote add openwrt $REPO_URL
        git fetch --depth 1 openwrt e04fd21629fead0cae623df65a6a58466dfe1d51
        git reset --hard e04fd21629fead0cae623df65a6a58466dfe1d51
        #link to openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Update feeds
      if: steps.initial.outputs.status == 'success'
      run: |
        cd openwrt/
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load custom configuration
      if: steps.initial.outputs.status == 'success'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config

#    - name: SSH connection to Actions
#      uses: P3TERX/debugger-action@main
#      if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

    - name: Update Smartdns
      if: steps.smartdns.outputs.status == 'success'
      run: |
        cd ./openwrt
        if ! grep -q "${{ env.SMARTDNS_VER }}" ./package/feeds/packages/smartdns/Makefile; then
          sed -i -e '/^PKG_MIRROR_HASH/s#=.*#=skip#' -e "/^PKG_VERSION/s#=.*#=${{ env.SMARTDNS_VER }}#" -e "/^PKG_SOURCE_VERSION/s#=.*#=${{ env.SMARTDNS_COMMIT }}#" ./package/feeds/packages/smartdns/Makefile
          make ./package/feeds/packages/smartdns/download V=s
          make ./package/feeds/packages/smartdns/check FIXUP=1 V=s
        fi
        echo "CHANGELOG=Update: smartdns ${{ env.SMARTDNS_VER }} ${{ env.SMARTDNS_COMMIT }}" >> $GITHUB_ENV

    - name: Update Golang
      if: steps.golang.outputs.status == 'success'
      run: |
        cd ./openwrt
        lean_golang=$(cat ./feeds/packages/lang/golang/golang/Makefile)
        if ! echo "$lean_golang" |grep -q "GO_VERSION_MAJOR_MINOR:=$get_Go_ver_major" || ! echo "$lean_golang" |grep -q "GO_VERSION_PATCH:=$get_Go_ver_patch" ; then
          sed -i -e '/^PKG_HASH/s#=.*#=skip#' -e "/^GO_VERSION_MAJOR_MINOR/s#=.*#=${{ env.GO_VERSION_MAJOR_MINOR }}#" -e "/^GO_VERSION_PATCH/s#=.*#=${{ env.GO_VERSION_PATCH }}#" ./feeds/packages/lang/golang/golang/Makefile
          make ./feeds/packages/lang/golang/golang/download V=s
          make ./feeds/packages/lang/golang/golang/check FIXUP=1 V=s
        fi

    - name: Update V2ray
      if: steps.v2ray.outputs.status == 'success'
      run: |
        cd ./openwrt
        if ! grep "^PKG_VERSION.*${{ env.V2RAY_VER }}" ./package/lean/v2ray/Makefile; then
          sed -i -e '/^PKG_HASH/s#=.*#=skip#' -e "/^PKG_VERSION/s#=.*#=${{ env.V2RAY_VER }}#" ./package/lean/v2ray/Makefile
          make ./package/lean/v2ray/download V=s
          make ./package/lean/v2ray/check FIXUP=1 V=s
        fi
        echo "CHANGELOG=Update: v2ray ${{ env.V2RAY_VER }}" >> $GITHUB_ENV

    - name: Update Xray
      if: steps.xray.outputs.status == 'success'
      run: |
        cd ./openwrt
        if ! grep "^PKG_VERSION.*${{ env.XRAY_VER }}" ./package/lean/xray/Makefile; then
          sed -i -e '/^PKG_HASH/s#=.*#=skip#' -e "/^PKG_VERSION/s#=.*#=${{ env.XRAY_VER }}#" ./package/lean/xray/Makefile
          make ./package/lean/xray/download V=s
          make ./package/lean/xray/check FIXUP=1 V=s
        fi
        echo "CHANGELOG=Update: xray ${{ env.XRAY_VER }}" >> $GITHUB_ENV

    - name: Download package
      if: steps.initial.outputs.status == 'success'
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      if: steps.initial.outputs.status == 'success'
      run: |
        cd ./openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s

    - name: Check space usage
      if: steps.initial.outputs.status == 'success' && (!cancelled())
      run: df -hT

    - name: Organize files
      if: steps.initial.outputs.status == 'success'
      run: |
        newFile=$(echo "${{ env.CHANGELOG }}" | cut -d\  -f2 )
        rm -f  $GITHUB_WORKSPACE/old/${newFile}_*.ipk
        cp -f ./openwrt/bin/packages/*/*/${newFile}_*.ipk $GITHUB_WORKSPACE/old/

    - name: Release and upload assets
      uses: softprops/action-gh-release@59c3b4891632ff9a897f99a91d7bc557467a3a22
      if: steps.initial.outputs.status == 'success'
      with:
        name: ${{ env.RELEASE_NAME }}
        tag_name: ${{ env.TAG_NAME }}
        body: "${{ env.CHANGELOG }}"
        draft: false
        prerelease: false
        files: |
          ./old/*.ipk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Git push assets to "release" branch
      if: steps.initial.outputs.status == 'success'
      run: |
        cd ./old
        sed -i '/url =/d' ./.git/config
        git config --local user.name "actions"
        git config --local user.email "action@github.com"
        git add .
        git commit -m "${{ env.CHANGELOG }}"
        git remote set-url --add origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
        git push -u origin release

    - name: Upload App To Lanzou
      id: lanzou
      if: steps.initial.outputs.status == 'success'
      run: |
        newFile=$(echo "${{ env.CHANGELOG }}" | cut -d\  -f2 )
        mkdir -p $GITHUB_WORKSPACE/new
        mv -f $GITHUB_WORKSPACE/old/${newFile}_*.ipk $GITHUB_WORKSPACE/new/${newFile}_*.zip
        path="$GITHUB_WORKSPACE/new/${newFile}_*.zip"
        python3 $GITHUB_WORKSPACE/.github/lzy_web.py "$path" "$LANZOU_FOLDER_ID"
